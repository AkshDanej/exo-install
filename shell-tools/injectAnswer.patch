diff --git a/extras/injection/src/main/java/org/exoplatform/forum/extras/injection/faq/CategoryInjector.java b/extras/injection/src/main/java/org/exoplatform/forum/extras/injection/faq/CategoryInjector.java
index 20039f4..4171de1 100644
--- a/extras/injection/src/main/java/org/exoplatform/forum/extras/injection/faq/CategoryInjector.java
+++ b/extras/injection/src/main/java/org/exoplatform/forum/extras/injection/faq/CategoryInjector.java
@@ -11,6 +11,8 @@ public class CategoryInjector extends AbstractFAQInjector {
   
   /** . */
   private static final String CATEGORY_PREFIX = "catPrefix";
+  
+  int rootLever = 1;
 
   @Override
   public void inject(HashMap<String, String> params) throws Exception {
@@ -21,27 +23,40 @@ public class CategoryInjector extends AbstractFAQInjector {
     
     //
     Category rootCategory = getCategoryRoot(true);
-    String categoryName = null;
-    Category cat = null;
     
+    rootLever = param(params, "lever");
+    
+    addCategory(rootCategory.getPath(), number, 0);
+  }
+  
+  private void addCategory(String path, int number, int lever) {
+    System.out.println("\nrootLever " + rootLever + "  lever: " + lever);
     for(int i = 0; i < number; i++) {
       //
-      categoryName = categoryName();
-      
-      //
-      cat = new Category();
+      String categoryName;
+      if(rootLever == 0 || lever == 0) {
+        categoryName = categoryName();
+        categoryNumber++;
+      } else {
+        categoryName = categoryName() + "_" + lever + "_" + i;
+      }
+      Category cat = new Category();
       cat.setIndex(i);
       cat.setName(categoryName);
       cat.setDescription(lorem.getParagraphs(1));
-      cat.setModerators(new String[] {""});
+      cat.setModerators(new String[] {"root"});
       cat.setUserPrivate(new String[] {""});
       
       //
-      faqService.saveCategory(rootCategory.getPath(), cat, true);
-      categoryNumber++;
-      
+      faqService.saveCategory(path, cat, true);
       //
-      getLog().info("Category '" + categoryName + "' created with parent is '" + rootCategory.getId() + "'");
+      getLog().info("Created Category '" + categoryName );
+
+      int nlever = lever + 1;
+      if(nlever < rootLever) {
+        addCategory(path + "/" + cat.getId(), number, nlever);
+      }
+      
     }
   }
 }
diff --git a/extras/injection/src/main/java/org/exoplatform/forum/extras/injection/user/UserInjector.java b/extras/injection/src/main/java/org/exoplatform/forum/extras/injection/user/UserInjector.java
new file mode 100644
index 0000000..197f90e
--- /dev/null
+++ b/extras/injection/src/main/java/org/exoplatform/forum/extras/injection/user/UserInjector.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.forum.extras.injection.user;
+
+import java.util.HashMap;
+
+import org.exoplatform.container.PortalContainer;
+import org.exoplatform.forum.extras.injection.utils.ExoNameGenerator;
+import org.exoplatform.services.bench.DataInjector;
+import org.exoplatform.services.log.ExoLogger;
+import org.exoplatform.services.log.Log;
+import org.exoplatform.services.organization.OrganizationService;
+import org.exoplatform.services.organization.User;
+import org.exoplatform.services.organization.UserHandler;
+
+/**
+ * @version $Revision$
+ */
+public class UserInjector extends DataInjector {
+
+  private static String               PASSWORD = "gtn";
+
+  private static String               DOMAIN   = "@exoplf.com";
+
+  protected final UserHandler         userHandler;
+
+  protected final OrganizationService organizationService;
+
+  protected ExoNameGenerator          exoNameGenerator;
+
+  public UserInjector() {
+    PortalContainer c = PortalContainer.getInstance();
+    this.organizationService = (OrganizationService) c.getComponentInstanceOfType(OrganizationService.class);
+    this.userHandler = organizationService.getUserHandler();
+    this.exoNameGenerator = new ExoNameGenerator();
+  }
+
+  @Override
+  public void inject(HashMap<String, String> params) throws Exception {
+
+    String users = params.get("users");
+    String[] userNames = users.split(",");
+    //
+    for (int i = 0; i < userNames.length; ++i) {
+
+      //
+      String userName = userNames[i].trim().replace(" ", "_").toLowerCase();
+
+      if (userHandler.findUserByName(userName) == null) {
+        User user = userHandler.createUserInstance(userName);
+        user.setEmail(userName + DOMAIN);
+        user.setFirstName(exoNameGenerator.compose(3));
+        user.setLastName(exoNameGenerator.compose(4));
+        user.setPassword(PASSWORD);
+
+        try {
+
+          //
+          userHandler.createUser(user, true);
+
+          //
+          // ++userNumber;
+
+        } catch (Exception e) {
+          getLog().error(e);
+        }
+        getLog().info("User '" + userName + "' generated");
+      } else {
+        getLog().info("User '" + userName + "' has been created.");
+        
+      }
+
+      //
+    }
+  }
+
+  @Override
+  public Log getLog() {
+    return ExoLogger.getExoLogger(this.getClass());
+  }
+
+  @Override
+  public Object execute(HashMap<String, String> params) throws Exception {
+    // TODO Auto-generated method stub
+    return null;
+  }
+
+  @Override
+  public void reject(HashMap<String, String> params) throws Exception {
+    // TODO Auto-generated method stub
+
+  }
+
+}
diff --git a/extras/injection/src/main/resources/conf/portal/configuration.xml b/extras/injection/src/main/resources/conf/portal/configuration.xml
index 1ef97ae..a21e3cd 100644
--- a/extras/injection/src/main/resources/conf/portal/configuration.xml
+++ b/extras/injection/src/main/resources/conf/portal/configuration.xml
@@ -97,6 +97,10 @@
     <type>org.exoplatform.forum.extras.injection.poll.VoteInjector</type>
   </component>
 
+  <component>
+    <type>org.exoplatform.forum.extras.injection.user.UserInjector</type>
+  </component>
+
   <external-component-plugins>
     <target-component>org.exoplatform.services.bench.DataInjectorService</target-component>
 
@@ -188,5 +192,11 @@
       <type>org.exoplatform.forum.extras.injection.poll.VoteInjector</type>
     </component-plugin>
 
+    <component-plugin>
+      <name>userInject</name>
+      <set-method>addInjector</set-method>
+      <type>org.exoplatform.forum.extras.injection.user.UserInjector</type>
+    </component-plugin>
+
   </external-component-plugins>
 </configuration>
